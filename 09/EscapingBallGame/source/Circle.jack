/** Implements a graphical circle. */
class Circle {

    field int x, y; // screen location of the circle's containing square's top-left corner
    field int size; // diameter of the circle, in pixels

    /** Constructs a new circle with a given location and size. */
    constructor Circle new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        do draw();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the circle on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x+(size/2), y+(size/2), size/2);
        return;
    }

    /** Erases the circle from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawCircle(x+(size/2), y+(size/2), size/2);
        return;
    }

    /** Moves the circle up by 2 pixels. */
    method void moveUp() {
        if (y > 1) {
            do erase();
            let y = y - 2;
            do draw();
        }
        return;
    }

    /** Moves the circle down by 2 pixels. */
    method void moveDown() {
        if ((y + size) < 254) {
            do erase();
            let y = y + 2;
            do draw();
        }
        return;
    }

    /** Moves the circle left by 2 pixels. */
    method void moveLeft() {
        if (x > 1) {
            do erase();
            let x = x - 2;
            do draw();
        }
        return;
    }

    /** Moves the circle right by 2 pixels. */
    method void moveRight() {
        if ((x + size) < 510) {
            do erase();
            let x = x + 2;
            do draw();
        }
        return;
    }

    method boolean reachedTop() {
        return (y < 2);
    }

    method boolean reachedBottom() {
        return ((y + size) > 253);
    }

    /** Accessors */
    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method int getSize() {
        return size;
    }
}
