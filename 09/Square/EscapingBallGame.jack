/**
 * Implements the Escaping ball game.
 * This simple game allows the user to control a falling ball and help it
 * navigate the screen with obstacles.
 *
 * When the game starts, a ball of radius 15 is shown at the bottom-left corner
 * on a platform/obstacle. The user can use the arrow keys to move the ball
 * left or right while the platform carries the ball upward. If the ball falls
 * off a platform it needs to land on another platform, otherwise the game
 * ends as the poor ball falls into oblivion. If you leave the ball on a moving
 * platform for too long the ball will be squashed by the ceiling, therefore
 * also marks the end of the game. The longer you help the ball stay alive
 * the higher your score is (displayed on the top right corner). Once you hit
 * 20000, you win!
 *
 * When you are bored press 'q' to quit the game.
 */

class EscapingBallGame {
    field Circle ball; // the ball of this game
    field Array obstacles;
    field int numObstacles;
    field int score;
    field int direction; // the ball's current direction: 
    // 0=none, 1=up, 2=down, 3=left, 4=right

    constructor EscapingBallGame new() {
        // Creates a circle with 30px diameter and positions it at the bottom-left
        // of the screen.
        let ball = Circle.new(0, 215, 30);
        let direction = 0;  // initial state is no movement
        let score = 0;

        // initialize obstacles
        do Obstacle.init();
        let numObstacles = 5; // at anytime there are 5 obstacles on the screen
        let obstacles = Array.new(numObstacles);
        let obstacles[0] = Obstacle.new(0, 245, 64);
        let obstacles[1] = Obstacle.new(72, 200, 128);
        let obstacles[2] = Obstacle.new(256, 150, 32);
        let obstacles[3] = Obstacle.new(320, 100, 96);
        let obstacles[4] = Obstacle.new(448, 50, 63);
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        var int i;
        var Obstacle tmp;

        let i = 0;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            do tmp.dispose();
            let i = i + 1;
        }
        do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** If the it touches any obstacle, move the ball up otherwise it fallse down */
    /** User can also control the ball to move left or right */
    method void moveBall() {
        var int i;
        var boolean touchedAnyObstacle;
        var Obstacle tmp;

        let i = 0;
        let touchedAnyObstacle = false;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            if (tmp.touched(ball)) {
                let touchedAnyObstacle = true;
            }
            let i = i + 1;
        }
        if (touchedAnyObstacle) {
            do ball.moveUp();
        } else {
            do ball.moveDown();
        }

        if (direction = 3) { do ball.moveLeft(); }
        if (direction = 4) { do ball.moveRight(); }
        return;
    }

    /** Move all the visible obstacles up */
    method void moveObstacles() {
        var int i;
        var Obstacle tmp;

        let i = 0;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            do tmp.moveUp();
            let i = i + 1;
        }
        do Sys.wait(20);  // delays the next movement
        return;
    }

    /** Increment score and print the updated score on top right corner of the screen */
    method void updateScore() {
        let score = score + 20;
        do Output.moveCursor(0, 52);
        do Output.printString("Score: ");
        do Output.printInt(score);
        return;
    }

    /** Move the ball & all the obstacles on the screen, update score and return true if game ends */
    method boolean updateGameObjects() {
        do moveBall();
        do moveObstacles();
        do updateScore();

        // end the game if ball is squashed or falls into void
        if (ball.reachedTop() | ball.reachedBottom()) {
            do Output.moveCursor(11, 27);
            do Output.printString("Game Over");
            return true;
        }

        // end the game if the user accumulates 20000 points
        if (score > 19999) {
            do Output.moveCursor(11, 27);
            do Output.printString("You Won!");
            return true;
        }

        return false;
    }

    /** Runs the game: handles the user's inputs and moves the objects accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit, endOfGame;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                let endOfGame = updateGameObjects();
                if (endOfGame) {
                    return;
                }
            }
            if (key = 81)  { let exit = true; }     // q key
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                let endOfGame = updateGameObjects();
                if (endOfGame) {
                    return;
                }
            }
        } // while
        return;
    }
}



