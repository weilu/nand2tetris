// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SquareGame {
    field Square square; // the square of this game
    field Array obstacles;
    field int numObstacles;
    field int direction; // the square's current direction: 
    // 0=none, 1=up, 2=down, 3=left, 4=right

    /** Constructs a new Square Game. */
    constructor SquareGame new() {
        // Creates a 30 by 30 pixels square and positions it at the top-left
        // of the screen.
        let square = Square.new(0, 215, 30);
        let direction = 0;  // initial state is no movement

        // initialize obstacles
        do Obstacle.init();
        let numObstacles = 5; // at anytime there are 5 obstacles on the screen
        let obstacles = Array.new(numObstacles);
        let obstacles[0] = Obstacle.new(0, 245, 64);
        let obstacles[1] = Obstacle.new(72, 200, 128);
        let obstacles[2] = Obstacle.new(256, 150, 32);
        let obstacles[3] = Obstacle.new(320, 100, 96);
        let obstacles[4] = Obstacle.new(448, 50, 63);
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        var int i;
        var Obstacle tmp;

        let i = 0;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            do tmp.dispose();
            let i = i + 1;
        }
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** If the it touches any obstacle, move the square up otherwise it fallse down */
    /** User can also control the obstacle to move left or right */
    method void moveSquare() {
        var int i;
        var boolean touchedAnyObstacle;
        var Obstacle tmp;

        let i = 0;
        let touchedAnyObstacle = false;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            if (tmp.touched(square)) {
                let touchedAnyObstacle = true;
            }
            let i = i + 1;
        }
        if (touchedAnyObstacle) {
            do square.moveUp();
        } else {
            do square.moveDown();
        }

        if (direction = 3) { do square.moveLeft(); }
        if (direction = 4) { do square.moveRight(); }
        return;
    }

    /** Move all the visible obstacles up */
    method void moveObstacles() {
        var int i;
        var Obstacle tmp;

        let i = 0;
        while (i < numObstacles) {
            let tmp = obstacles[i];
            do tmp.moveUp();
            let i = i + 1;
        }
        do Sys.wait(20);  // delays the next movement
        return;
    }

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do moveObstacles();
                if (square.reachedTop() | square.reachedBottom()) {
                    do Output.moveCursor(11, 27);
                    do Output.printString("Game Over");
                    return;
                }
            }
            if (key = 81)  { let exit = true; }     // q key
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do moveObstacles();
                if (square.reachedTop() | square.reachedBottom()) {
                    do Output.moveCursor(11, 27);
                    do Output.printString("Game Over");
                    return;
                }
            }
        } // while
        return;
    }
}



