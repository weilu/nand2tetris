// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // A:  0 v v v  v  v  v  v  v  v  v  v  v  v  v
    // C:  1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    PARTS:
    // instruction[15] == 0, then A: read instruction[0..14] to A, else C, read prev ALU output to A
    Mux16(a[0..14]=instruction[0..14], b=aluouta, sel=instruction[15], out=ain);

    // load A register if A instruction or C instruction dest writeA
    Not(in=instruction[15], out=isa);
    And(a=instruction[15], b=instruction[5], out=iscwritea);
    Or(a=isa, b=iscwritea, out=readaorwritea);
    ARegister(in=ain, load=readaorwritea, out=aout, out=aoutpc, out[0..14]=addressM);

    // decide read from A or M, instruction[12] => a bit in C instruction
    Mux16(a=aout, b=inM, sel=instruction[12], out=amin);

    // comp bits
    ALU(x=dout, y=amin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=aluzero, ng=alunegative, out=outM, out=aluouta, out=aluoutd);

    // load D register if C instruction dest writeD
    And(a=instruction[15], b=instruction[4], out=iscwrited);
    DRegister(in=aluoutd, load=iscwrited, out=dout);

    // The first and second d-bits code whether to store the computed value in the A register and in the D register, respectively. The third d-bit codes whether to store the computed value in M
    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC
    // alupositive iif aluzero == alunegative == 0
    Or(a=aluzero, b=alunegative, out=aluzeroornegative);
    Not(in=aluzeroornegative, out=alupositive);
    And(a=alunegative, b=instruction[2], out=jumpnegative);
    And(a=aluzero, b=instruction[1], out=jumpzero);
    And(a=alupositive, b=instruction[0], out=jumppositive);
    Or(a=jumpnegative, b=jumppositive, out=jumpporn);
    Or(a=jumpporn, b=jumpzero, out=maybejumpload);
    DMux(in=maybejumpload, sel=instruction[15], a=dummy, b=jumpload);
    Not(in=jumpload, out=jumpinc);
    PC(in=aoutpc, load=jumpload, inc=jumpinc, reset=reset, out[0..14]=pc);
}
